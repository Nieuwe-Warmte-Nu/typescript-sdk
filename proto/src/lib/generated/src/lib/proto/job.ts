/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: src/lib/proto/job.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export class JobSubmission extends pb_1.Message {
  #one_of_decls: number[][] = [[2]];
  constructor(
    data?:
      | any[]
      | ({
          uuid?: string;
          workflow_type?: string;
          esdl?: Uint8Array;
        } & {
          timeout_ms?: number;
        })
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid;
      }
      if ('timeout_ms' in data && data.timeout_ms != undefined) {
        this.timeout_ms = data.timeout_ms;
      }
      if ('workflow_type' in data && data.workflow_type != undefined) {
        this.workflow_type = data.workflow_type;
      }
      if ('esdl' in data && data.esdl != undefined) {
        this.esdl = data.esdl;
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get timeout_ms() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set timeout_ms(value: number) {
    pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
  }
  get has_timeout_ms() {
    return pb_1.Message.getField(this, 2) != null;
  }
  get workflow_type() {
    return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
  }
  set workflow_type(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  get esdl() {
    return pb_1.Message.getFieldWithDefault(
      this,
      4,
      new Uint8Array(0)
    ) as Uint8Array;
  }
  set esdl(value: Uint8Array) {
    pb_1.Message.setField(this, 4, value);
  }
  get _timeout_ms() {
    const cases: {
      [index: number]: 'none' | 'timeout_ms';
    } = {
      0: 'none',
      2: 'timeout_ms',
    };
    return cases[pb_1.Message.computeOneofCase(this, [2])];
  }
  static fromObject(data: {
    uuid?: string;
    timeout_ms?: number;
    workflow_type?: string;
    esdl?: Uint8Array;
  }): JobSubmission {
    const message = new JobSubmission({});
    if (data.uuid != null) {
      message.uuid = data.uuid;
    }
    if (data.timeout_ms != null) {
      message.timeout_ms = data.timeout_ms;
    }
    if (data.workflow_type != null) {
      message.workflow_type = data.workflow_type;
    }
    if (data.esdl != null) {
      message.esdl = data.esdl;
    }
    return message;
  }
  toObject() {
    const data: {
      uuid?: string;
      timeout_ms?: number;
      workflow_type?: string;
      esdl?: Uint8Array;
    } = {};
    if (this.uuid != null) {
      data.uuid = this.uuid;
    }
    if (this.timeout_ms != null) {
      data.timeout_ms = this.timeout_ms;
    }
    if (this.workflow_type != null) {
      data.workflow_type = this.workflow_type;
    }
    if (this.esdl != null) {
      data.esdl = this.esdl;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.uuid.length) writer.writeString(1, this.uuid);
    if (this.has_timeout_ms) writer.writeUint32(2, this.timeout_ms);
    if (this.workflow_type.length) writer.writeString(3, this.workflow_type);
    if (this.esdl.length) writer.writeBytes(4, this.esdl);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobSubmission {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new JobSubmission();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString();
          break;
        case 2:
          message.timeout_ms = reader.readUint32();
          break;
        case 3:
          message.workflow_type = reader.readString();
          break;
        case 4:
          message.esdl = reader.readBytes();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JobSubmission {
    return JobSubmission.deserialize(bytes);
  }
}
export class JobResult extends pb_1.Message {
  #one_of_decls: number[][] = [[3]];
  constructor(
    data?:
      | any[]
      | ({
          uuid?: string;
          result_type?: JobResult.ResultType;
          logs?: string;
        } & {
          output_esdl?: Uint8Array;
        })
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid;
      }
      if ('result_type' in data && data.result_type != undefined) {
        this.result_type = data.result_type;
      }
      if ('output_esdl' in data && data.output_esdl != undefined) {
        this.output_esdl = data.output_esdl;
      }
      if ('logs' in data && data.logs != undefined) {
        this.logs = data.logs;
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get result_type() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      JobResult.ResultType.SUCCEEDED
    ) as JobResult.ResultType;
  }
  set result_type(value: JobResult.ResultType) {
    pb_1.Message.setField(this, 2, value);
  }
  get output_esdl() {
    return pb_1.Message.getFieldWithDefault(
      this,
      3,
      new Uint8Array(0)
    ) as Uint8Array;
  }
  set output_esdl(value: Uint8Array) {
    pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
  }
  get has_output_esdl() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get logs() {
    return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
  }
  set logs(value: string) {
    pb_1.Message.setField(this, 4, value);
  }
  get _output_esdl() {
    const cases: {
      [index: number]: 'none' | 'output_esdl';
    } = {
      0: 'none',
      3: 'output_esdl',
    };
    return cases[pb_1.Message.computeOneofCase(this, [3])];
  }
  static fromObject(data: {
    uuid?: string;
    result_type?: JobResult.ResultType;
    output_esdl?: Uint8Array;
    logs?: string;
  }): JobResult {
    const message = new JobResult({});
    if (data.uuid != null) {
      message.uuid = data.uuid;
    }
    if (data.result_type != null) {
      message.result_type = data.result_type;
    }
    if (data.output_esdl != null) {
      message.output_esdl = data.output_esdl;
    }
    if (data.logs != null) {
      message.logs = data.logs;
    }
    return message;
  }
  toObject() {
    const data: {
      uuid?: string;
      result_type?: JobResult.ResultType;
      output_esdl?: Uint8Array;
      logs?: string;
    } = {};
    if (this.uuid != null) {
      data.uuid = this.uuid;
    }
    if (this.result_type != null) {
      data.result_type = this.result_type;
    }
    if (this.output_esdl != null) {
      data.output_esdl = this.output_esdl;
    }
    if (this.logs != null) {
      data.logs = this.logs;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.uuid.length) writer.writeString(1, this.uuid);
    if (this.result_type != JobResult.ResultType.SUCCEEDED)
      writer.writeEnum(2, this.result_type);
    if (this.has_output_esdl) writer.writeBytes(3, this.output_esdl);
    if (this.logs.length) writer.writeString(4, this.logs);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobResult {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new JobResult();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString();
          break;
        case 2:
          message.result_type = reader.readEnum();
          break;
        case 3:
          message.output_esdl = reader.readBytes();
          break;
        case 4:
          message.logs = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JobResult {
    return JobResult.deserialize(bytes);
  }
}
export namespace JobResult {
  export enum ResultType {
    SUCCEEDED = 0,
    TIMEOUT = 1,
    ERROR = 2,
  }
}
export class JobProgressUpdate extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          uuid?: string;
          progress?: number;
          message?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid;
      }
      if ('progress' in data && data.progress != undefined) {
        this.progress = data.progress;
      }
      if ('message' in data && data.message != undefined) {
        this.message = data.message;
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get progress() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set progress(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  get message() {
    return pb_1.Message.getFieldWithDefault(this, 3, '') as string;
  }
  set message(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  static fromObject(data: {
    uuid?: string;
    progress?: number;
    message?: string;
  }): JobProgressUpdate {
    const message = new JobProgressUpdate({});
    if (data.uuid != null) {
      message.uuid = data.uuid;
    }
    if (data.progress != null) {
      message.progress = data.progress;
    }
    if (data.message != null) {
      message.message = data.message;
    }
    return message;
  }
  toObject() {
    const data: {
      uuid?: string;
      progress?: number;
      message?: string;
    } = {};
    if (this.uuid != null) {
      data.uuid = this.uuid;
    }
    if (this.progress != null) {
      data.progress = this.progress;
    }
    if (this.message != null) {
      data.message = this.message;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.uuid.length) writer.writeString(1, this.uuid);
    if (this.progress != 0) writer.writeDouble(2, this.progress);
    if (this.message.length) writer.writeString(3, this.message);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobProgressUpdate {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new JobProgressUpdate();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString();
          break;
        case 2:
          message.progress = reader.readDouble();
          break;
        case 3:
          message.message = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JobProgressUpdate {
    return JobProgressUpdate.deserialize(bytes);
  }
}
export class JobStatusUpdate extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          uuid?: string;
          status?: JobStatusUpdate.JobStatus;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid;
      }
      if ('status' in data && data.status != undefined) {
        this.status = data.status;
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get status() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      JobStatusUpdate.JobStatus.REGISTERED
    ) as JobStatusUpdate.JobStatus;
  }
  set status(value: JobStatusUpdate.JobStatus) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
    uuid?: string;
    status?: JobStatusUpdate.JobStatus;
  }): JobStatusUpdate {
    const message = new JobStatusUpdate({});
    if (data.uuid != null) {
      message.uuid = data.uuid;
    }
    if (data.status != null) {
      message.status = data.status;
    }
    return message;
  }
  toObject() {
    const data: {
      uuid?: string;
      status?: JobStatusUpdate.JobStatus;
    } = {};
    if (this.uuid != null) {
      data.uuid = this.uuid;
    }
    if (this.status != null) {
      data.status = this.status;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.uuid.length) writer.writeString(1, this.uuid);
    if (this.status != JobStatusUpdate.JobStatus.REGISTERED)
      writer.writeEnum(2, this.status);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobStatusUpdate {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new JobStatusUpdate();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString();
          break;
        case 2:
          message.status = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JobStatusUpdate {
    return JobStatusUpdate.deserialize(bytes);
  }
}
export namespace JobStatusUpdate {
  export enum JobStatus {
    REGISTERED = 0,
    ENQUEUED = 1,
    RUNNING = 2,
    FINISHED = 3,
    CANCELLED = 4,
  }
}
export class JobCancel extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          uuid?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('uuid' in data && data.uuid != undefined) {
        this.uuid = data.uuid;
      }
    }
  }
  get uuid() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set uuid(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  static fromObject(data: { uuid?: string }): JobCancel {
    const message = new JobCancel({});
    if (data.uuid != null) {
      message.uuid = data.uuid;
    }
    return message;
  }
  toObject() {
    const data: {
      uuid?: string;
    } = {};
    if (this.uuid != null) {
      data.uuid = this.uuid;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.uuid.length) writer.writeString(1, this.uuid);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobCancel {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new JobCancel();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.uuid = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): JobCancel {
    return JobCancel.deserialize(bytes);
  }
}
