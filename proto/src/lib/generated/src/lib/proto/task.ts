/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: src/lib/proto/task.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export class TaskResult extends pb_1.Message {
  #one_of_decls: number[][] = [[4]];
  constructor(
    data?:
      | any[]
      | ({
          job_id?: string;
          celery_task_id?: string;
          celery_task_type?: string;
          result_type?: TaskResult.ResultType;
          logs?: string;
        } & {
          output_esdl?: Uint8Array;
        })
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('job_id' in data && data.job_id != undefined) {
        this.job_id = data.job_id;
      }
      if ('celery_task_id' in data && data.celery_task_id != undefined) {
        this.celery_task_id = data.celery_task_id;
      }
      if ('celery_task_type' in data && data.celery_task_type != undefined) {
        this.celery_task_type = data.celery_task_type;
      }
      if ('result_type' in data && data.result_type != undefined) {
        this.result_type = data.result_type;
      }
      if ('output_esdl' in data && data.output_esdl != undefined) {
        this.output_esdl = data.output_esdl;
      }
      if ('logs' in data && data.logs != undefined) {
        this.logs = data.logs;
      }
    }
  }
  get job_id() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set job_id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get celery_task_id() {
    return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
  }
  set celery_task_id(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get celery_task_type() {
    return pb_1.Message.getFieldWithDefault(this, 6, '') as string;
  }
  set celery_task_type(value: string) {
    pb_1.Message.setField(this, 6, value);
  }
  get result_type() {
    return pb_1.Message.getFieldWithDefault(
      this,
      3,
      TaskResult.ResultType.SUCCEEDED
    ) as TaskResult.ResultType;
  }
  set result_type(value: TaskResult.ResultType) {
    pb_1.Message.setField(this, 3, value);
  }
  get output_esdl() {
    return pb_1.Message.getFieldWithDefault(
      this,
      4,
      new Uint8Array(0)
    ) as Uint8Array;
  }
  set output_esdl(value: Uint8Array) {
    pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
  }
  get has_output_esdl() {
    return pb_1.Message.getField(this, 4) != null;
  }
  get logs() {
    return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
  }
  set logs(value: string) {
    pb_1.Message.setField(this, 5, value);
  }
  get _output_esdl() {
    const cases: {
      [index: number]: 'none' | 'output_esdl';
    } = {
      0: 'none',
      4: 'output_esdl',
    };
    return cases[pb_1.Message.computeOneofCase(this, [4])];
  }
  static fromObject(data: {
    job_id?: string;
    celery_task_id?: string;
    celery_task_type?: string;
    result_type?: TaskResult.ResultType;
    output_esdl?: Uint8Array;
    logs?: string;
  }): TaskResult {
    const message = new TaskResult({});
    if (data.job_id != null) {
      message.job_id = data.job_id;
    }
    if (data.celery_task_id != null) {
      message.celery_task_id = data.celery_task_id;
    }
    if (data.celery_task_type != null) {
      message.celery_task_type = data.celery_task_type;
    }
    if (data.result_type != null) {
      message.result_type = data.result_type;
    }
    if (data.output_esdl != null) {
      message.output_esdl = data.output_esdl;
    }
    if (data.logs != null) {
      message.logs = data.logs;
    }
    return message;
  }
  toObject() {
    const data: {
      job_id?: string;
      celery_task_id?: string;
      celery_task_type?: string;
      result_type?: TaskResult.ResultType;
      output_esdl?: Uint8Array;
      logs?: string;
    } = {};
    if (this.job_id != null) {
      data.job_id = this.job_id;
    }
    if (this.celery_task_id != null) {
      data.celery_task_id = this.celery_task_id;
    }
    if (this.celery_task_type != null) {
      data.celery_task_type = this.celery_task_type;
    }
    if (this.result_type != null) {
      data.result_type = this.result_type;
    }
    if (this.output_esdl != null) {
      data.output_esdl = this.output_esdl;
    }
    if (this.logs != null) {
      data.logs = this.logs;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.job_id.length) writer.writeString(1, this.job_id);
    if (this.celery_task_id.length) writer.writeString(2, this.celery_task_id);
    if (this.celery_task_type.length)
      writer.writeString(6, this.celery_task_type);
    if (this.result_type != TaskResult.ResultType.SUCCEEDED)
      writer.writeEnum(3, this.result_type);
    if (this.has_output_esdl) writer.writeBytes(4, this.output_esdl);
    if (this.logs.length) writer.writeString(5, this.logs);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskResult {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new TaskResult();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.job_id = reader.readString();
          break;
        case 2:
          message.celery_task_id = reader.readString();
          break;
        case 6:
          message.celery_task_type = reader.readString();
          break;
        case 3:
          message.result_type = reader.readEnum();
          break;
        case 4:
          message.output_esdl = reader.readBytes();
          break;
        case 5:
          message.logs = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): TaskResult {
    return TaskResult.deserialize(bytes);
  }
}
export namespace TaskResult {
  export enum ResultType {
    SUCCEEDED = 0,
    ERROR = 1,
  }
}
export class TaskProgressUpdate extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          job_id?: string;
          celery_task_id?: string;
          celery_task_type?: string;
          progress?: number;
          message?: string;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == 'object') {
      if ('job_id' in data && data.job_id != undefined) {
        this.job_id = data.job_id;
      }
      if ('celery_task_id' in data && data.celery_task_id != undefined) {
        this.celery_task_id = data.celery_task_id;
      }
      if ('celery_task_type' in data && data.celery_task_type != undefined) {
        this.celery_task_type = data.celery_task_type;
      }
      if ('progress' in data && data.progress != undefined) {
        this.progress = data.progress;
      }
      if ('message' in data && data.message != undefined) {
        this.message = data.message;
      }
    }
  }
  get job_id() {
    return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
  }
  set job_id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get celery_task_id() {
    return pb_1.Message.getFieldWithDefault(this, 2, '') as string;
  }
  set celery_task_id(value: string) {
    pb_1.Message.setField(this, 2, value);
  }
  get celery_task_type() {
    return pb_1.Message.getFieldWithDefault(this, 5, '') as string;
  }
  set celery_task_type(value: string) {
    pb_1.Message.setField(this, 5, value);
  }
  get progress() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set progress(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  get message() {
    return pb_1.Message.getFieldWithDefault(this, 4, '') as string;
  }
  set message(value: string) {
    pb_1.Message.setField(this, 4, value);
  }
  static fromObject(data: {
    job_id?: string;
    celery_task_id?: string;
    celery_task_type?: string;
    progress?: number;
    message?: string;
  }): TaskProgressUpdate {
    const message = new TaskProgressUpdate({});
    if (data.job_id != null) {
      message.job_id = data.job_id;
    }
    if (data.celery_task_id != null) {
      message.celery_task_id = data.celery_task_id;
    }
    if (data.celery_task_type != null) {
      message.celery_task_type = data.celery_task_type;
    }
    if (data.progress != null) {
      message.progress = data.progress;
    }
    if (data.message != null) {
      message.message = data.message;
    }
    return message;
  }
  toObject() {
    const data: {
      job_id?: string;
      celery_task_id?: string;
      celery_task_type?: string;
      progress?: number;
      message?: string;
    } = {};
    if (this.job_id != null) {
      data.job_id = this.job_id;
    }
    if (this.celery_task_id != null) {
      data.celery_task_id = this.celery_task_id;
    }
    if (this.celery_task_type != null) {
      data.celery_task_type = this.celery_task_type;
    }
    if (this.progress != null) {
      data.progress = this.progress;
    }
    if (this.message != null) {
      data.message = this.message;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.job_id.length) writer.writeString(1, this.job_id);
    if (this.celery_task_id.length) writer.writeString(2, this.celery_task_id);
    if (this.celery_task_type.length)
      writer.writeString(5, this.celery_task_type);
    if (this.progress != 0) writer.writeDouble(3, this.progress);
    if (this.message.length) writer.writeString(4, this.message);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): TaskProgressUpdate {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new TaskProgressUpdate();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.job_id = reader.readString();
          break;
        case 2:
          message.celery_task_id = reader.readString();
          break;
        case 5:
          message.celery_task_type = reader.readString();
          break;
        case 3:
          message.progress = reader.readDouble();
          break;
        case 4:
          message.message = reader.readString();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): TaskProgressUpdate {
    return TaskProgressUpdate.deserialize(bytes);
  }
}
